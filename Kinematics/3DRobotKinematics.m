function [] = 3DRobotKinematics()
close all
clc
clear

%% FIGURE
figure_handles = figure('units','normalized',...
    'position',[0 0 0.999 0.965],...
    'menubar','none',...
    'resize','on',...
    'NumberTitle','off',...
    'name','This is a very cool GUI for robotics simulations',...
    'color',[0.8 0.91 0.95]);
handles = guihandles(figure_handles);

%% DEFINICION DEL ROBOT
L = Link();
handles.bot = SerialLink(L);
handles.q = [];
%% TABLE WITH D-H PARAMETERS
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.04 .97 .25 .02],...
    'String','Denavit-Hartenberg Parameters',...
    'backg',[0.8 0.91 0.95]);
uicontrol('style','text',...
    'units','normalized',...
    'position',[-0.01 0.95 0.35 0.02],...
    'String','If you wish fewer degrees of freedom, leave the default values untouched.',...
    'backg',[0.8 0.91 0.95]);
odata = {0 0 0 0 'Rotative';0 0 0 0 'Rotative';0 0 0 0 'Rotative';
     0 0 0 0 'Rotative';0 0 0 0 'Rotative';0 0 0 0 'Rotative';0 0 0 0 'Rotative'};
handles.table = uitable('Data',odata,...
    'ColumnName',{'\theta','d','a','\alpha','Joint type'},...
    'RowName',{'1','2','3','4','5','6','7'},...
    'ColumnFormat',{'numeric','numeric','numeric','numeric',{'Rotative' 'Prismatic'}},...
    'ColumnEditable', [true true true true true],...
    'units','normalized');
handles.table.Position(1) = 0.02;
handles.table.Position(2) = .74;
handles.table.Position(3) = handles.table.Extent(3);
handles.table.Position(4) = handles.table.Extent(4);

%% SLIDER 1 for the first articular coordinate q1
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.005 0.7 0.02 0.025],...
    'string','q1',...
    'backg',[0.8 0.91 0.95]);
handles.slider1 = uicontrol('style','slider',...
    'units','normalized',...
    'position',[0.02 0.7 0.3 0.025],...
    'Tag','slider1',...
    'min',0,'max',360,'value',180);
handles.editsl1 = uicontrol('style','edit',...
    'units','normalized',...
    'position',[0.328 0.7 0.05 0.025],...
    'Tag','edit1',...
    'string','180');
set([handles.slider1,handles.editsl1],'call',{@slicall,handles});

%% SLIDER 2 for the second articular coordinate q2
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.005 0.66 0.02 0.025],...
    'string','q2',...
    'backg',[0.8 0.91 0.95]);
handles.slider2 = uicontrol('style','slider',...
    'units','normalized',...
    'position',[0.02 0.66 0.3 0.025],...
    'Tag','slider2',...
    'min',0,'max',360,'value',180);
handles.editsl2 = uicontrol('style','edit',...
    'units','normalized',...
    'position',[0.328 0.66 0.05 0.025],...
    'Tag','edit2',...
    'string','180');
set([handles.slider2,handles.editsl2],'call',{@slicall,handles});

%% SLIDER 3 for the third articular coordinate q3
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.005 0.62 0.02 0.025],...
    'string','q3',...
    'backg',[0.8 0.91 0.95]);
handles.slider3 = uicontrol('style','slider',...
    'units','normalized',...
    'position',[0.02 0.62 0.3 0.025],...
    'Tag','slider3',...
    'min',0,'max',360,'value',180);
handles.editsl3 = uicontrol('style','edit',...
    'units','normalized',...
    'Tag','edit3',...
    'position',[0.328 0.62 0.05 0.025],...
    'string','180');
set([handles.slider3,handles.editsl3],'call',{@slicall,handles});

%% SLIDER 4 for the fourth articular coordinate q4
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.005 0.58 0.02 0.025],...
    'string','q4',...
    'backg',[0.8 0.91 0.95]);
handles.slider4 = uicontrol('style','slider',...
    'units','normalized',...
    'position',[0.02 0.58 0.3 0.025],...
    'Tag','slider4',...
    'min',0,'max',360,'value',180);
handles.editsl4 = uicontrol('style','edit',...
    'units','normalized',...
    'position',[0.328 0.58 0.05 0.025],...
    'Tag','edit4',...
    'string','180');
set([handles.slider4,handles.editsl4],'call',{@slicall,handles});

%% SLIDER 5 for the fifth articular coordinate q5
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.005 0.54 0.02 0.025],...
    'string','q5',...
    'backg',[0.8 0.91 0.95]);
handles.slider5 = uicontrol('style','slider',...
    'units','normalized',...
    'position',[0.02 0.54 0.3 0.025],...
    'Tag','slider5',...
    'min',0,'max',360,'value',180);
handles.editsl5 = uicontrol('style','edit',...
    'units','normalized',...
    'Tag','edit5',...
    'position',[0.328 0.54 0.05 0.025],...
    'string','180');
set([handles.slider5,handles.editsl5],'call',{@slicall,handles});

%% SLIDER 6 for the sixth articular coordinate q6
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.005 0.5 0.02 0.025],...
    'string','q6',...
    'backg',[0.8 0.91 0.95]);
handles.slider6 = uicontrol('style','slider',...
    'units','normalized',...
    'position',[0.02 0.5 0.3 0.025],...
    'Tag','slider6',...
    'min',0,'max',360,'value',180);
handles.editsl6 = uicontrol('style','edit',...
    'units','normalized',...
    'position',[0.328 0.5 0.05 0.025],...
    'Tag','edit6',...
    'string','180');
set([handles.slider6,handles.editsl6],'call',{@slicall,handles});

%% SLIDER 7 for the seventh articular coordinate q7
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.005 0.46 0.02 0.025],...
    'string','q7',...
    'backg',[0.8 0.91 0.95]);
handles.slider7 = uicontrol('style','slider',...
    'units','normalized',...
    'position',[0.02 0.46 0.3 0.025],...
    'Tag','slider7',...
    'min',0,'max',360,'value',180);
handles.editsl7 = uicontrol('style','edit',...
    'units','normalized',...
    'position',[0.328 0.46 0.05 0.025],...
    'Tag','edit7',...
    'string','180');
set([handles.slider7,handles.editsl7],'call',{@slicall,handles});

%% PUSH BUTTON CONTROLS FOR THE TABLE (RESET AND CLOSE EDIT)
handles.toggleedit = uicontrol('style','toggle',...
    'units','normalized',...
    'position',[0.33 0.885 0.05 0.06],...
    'string','OK',...
    'FontSize',12,...
    'busyaction','cancel',...
    'interrupt','off',...
    'callback',{@toggle_edit,handles});
handles.pushreset = uicontrol('style','push',...
    'units','normalized',...
    'position',[0.33 0.77 0.05 0.04],...
    'string','Reset D-H',...
    'FontSize',8,...
    'busyaction','cancel',...
    'interrupt','off',...
    'callback',{@pb_reset,handles});

%% POP-UP MENU, EDITBOX AND SLIDER TO CHOOSE THE YOSHIKAWA SLICE
handles.popup = uicontrol('style','pop',...
    'units','normalized',...
    'position',[0.85 0.61 0.03 0.02],...
    'string',{'X','Y','Z','Gen'});
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.88 0.61 0.01 0.02],...
    'backg',[0.8 0.91 0.95],...
    'FontSize',12,...
    'string','=');
handles.edityoshi = uicontrol('style','edit',...
    'units','normalized',...
    'position',[0.89 0.603 0.03 0.025],...
    'string','No',...
    'Tag','YoshiEdit');
handles.slideryoshi = uicontrol('style','slider',...
    'units','normalized',...
    'position',[0.965 0.7 0.015 0.25],...
    'min',-10,'max',10,'value',0,...
    'Tag','YoshiSlider');
set([handles.slideryoshi,handles.edityoshi],'call',{@slicall,handles});

%% TABLES SHOWING THE COORDINATES AN THE HOMOGENEUS TRANS. MATRIX

% TABLE FOR THE MATRIX
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.41 0.565 0.23 0.028],...
    'FontSize',11,...
    'String','Homogeneus Transformation Matrix',...
    'backg',[0.8 0.91 0.95]);
mth = {0 0 0 0;0 0 0 0;0 0 0 0;0 0 0 0};
handles.tablemth = uitable('Data',mth,...
    'RowName',[],...
    'ColumnName',[],...
    'ColumnWidth',{80 80 80 80},...
    'ColumnFormat',{'short','short','short','numeric'},...
    'ColumnEditable', [false false false false],...
    'units','normalized');
handles.tablemth.Position(1) = 0.395;
handles.tablemth.Position(2) = .46;
handles.tablemth.Position(3) = handles.tablemth.Extent(3);
handles.tablemth.Position(4) = handles.tablemth.Extent(4);

% TABLE FOR THE COORDINATES
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.63 0.57 0.12 0.02],...
    'FontSize',9,...
    'String','XYZ',...
    'backg',[0.8 0.91 0.95]);
pos = {0;0;0};
handles.tablepos = uitable('Data',pos,...
    'RowName',{'X','Y','Z'},...
    'ColumnName',[],...
    'ColumnWidth',{80},...
    'ColumnFormat',{'numeric'},...
    'ColumnEditable', false,...
    'units','normalized');
handles.tablepos.Position(1) = 0.64;
handles.tablepos.Position(2) = .48;
handles.tablepos.Position(3) = handles.tablepos.Extent(3);
handles.tablepos.Position(4) = handles.tablepos.Extent(4);

% TABLE FOR THE ANGLES
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.73 0.57 0.12 0.02],...
    'FontSize',9,...
    'String','Euler angles',...
    'backg',[0.8 0.91 0.95]);
euler = {0;0;0};
handles.tableeul = uitable('Data',euler,...
    'RowName',{'Phi','Theta','Psi'},...
    'ColumnName',[],...
    'ColumnWidth',{80},...
    'ColumnFormat',{'numeric'},...
    'ColumnEditable', false,...
    'units','normalized');
handles.tableeul.Position(1) = 0.73;
handles.tableeul.Position(2) = .48;
handles.tableeul.Position(3) = handles.tableeul.Extent(3);
handles.tableeul.Position(4) = handles.tableeul.Extent(4);

%% TABLES FOR THE JACOBIANS
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.14 .3 .25 .02],...
    'String','Jacobian',...
    'FontSize',12,...
    'backg',[0.8 0.91 0.95]);

% TABLE FOR Jv
handles.jacobV = uitable('ColumnName',{'Jv1','Jv2','Jv3','Jv4','Jv5','Jv6','Jv7'},...
    'ColumnEditable', [false false false false false false false],...
    'RowName',{'','',''},...
    'units','normalized');
handles.jacobV.Position(1) = 0.05;
handles.jacobV.Position(2) = .17;
handles.jacobV.Position(3) = handles.jacobV.Extent(3);
handles.jacobV.Position(4) = handles.jacobV.Extent(4);

% TABLE FOR THE Jw
handles.jacobW = uitable('ColumnName',{'Jw1','Jw2','Jw3','Jw4','Jw5','Jw6','Jw7'},...
    'ColumnEditable', [false false false false false false false],...
    'RowName',{'','',''},...
    'units','normalized');
handles.jacobW.Position(1) = 0.05;
handles.jacobW.Position(2) = .04;
handles.jacobW.Position(3) = handles.jacobW.Extent(3);
handles.jacobW.Position(4) = handles.jacobW.Extent(4);

%% BOX WITH THE YOSHIKAWA VALUE AT THAT POINT
uicontrol('style','text',...
    'units','normalized',...
    'position',[0.7 0.595 0.1 0.03],...
    'backg',[0.8 0.91 0.95],...
    'FontSize',8,...
    'string','Slice´s thickness: ');
    
uicontrol('style','text',...
    'FontSize',10,...
    'string','Yoshikawa index',...
    'units','normalized',...
    'backg',[0.8 0.91 0.95],...
    'position',[0.85 0.55 0.09 0.03]);
handles.yoshikawabox = uicontrol('style','edit',...
    'units','normalized',...
    'position',[0.87 0.5 0.06 0.05],...
    'string','No');
handles.grosor = uicontrol('style','edit',...
    'units','normalized',...
    'position',[0.785 0.6 0.04 0.03],...
    'string','Default');

%% AXIS TO PLOT THE ROBOT
handles.axis = axes('units','normalized',...
    'position',[0.4 0.64 0.3 0.34],...
    'XTick',[],...
    'YTick',[],...
    'ZTick',[]);

%% AXIS TO PLOT THE JACOBIAN COMPONENTS (Jv AND Jw)
handles.Jvaxis = axes('units','normalized',...
    'position',[0.5 0.04 0.2 0.4]);
handles.Jwaxis = axes('units','normalized',...
    'position',[0.75 0.04 0.2 0.4]);

%% AXIS TO PLOT THE YOSHIKAWA MAP
handles.yoshikawa = axes('units','normalized',...
    'position',[0.71 0.64 0.25 0.34],...
    'XTick',[],'YTick',[],'ZTick',[]);

%% PUSH BUTTON to calculate the configuration
handles.pushbutton = uicontrol('style','push',...
    'units','normalized',...
    'position',[0.07 0.36 0.2 0.06],...
    'string','RUN',...
    'FontSize',12,...
    'busyaction','cancel',...
    'interrupt','off',...
    'callback',{@pb_call,handles});

%% PUSH BUTTON TO CALCULATE THE YOSHIKAWA MAP
handles.pbyoshikawa = uicontrol('style','push',...
    'units','normalized',...
    'position',[0.82 0.965 0.06 0.03],...
    'string','Create cloud',...
    'FontSize',7,...
    'busyaction','cancel',...
    'interrupt','off',...
    'callback',{@pb_generate,handles});

%% PUSH BUTTON TO VIEW THE SLICES OF YOSHIKAWA INDEX
handles.pbslicesyoshi = uicontrol('style','push',...
    'units','normalized',...
    'position',[0.93 0.6 0.04 0.03],...
    'string','RUN',...
    'FontSize',7,...
    'busyaction','cancel',...
    'interrupt','off',...
    'callback',{@pb_slices,handles});

guidata(figure_handles,handles)

function [] = pb_reset(varargin)
handles = varargin{3};
odata = {0 0 0 0 'Rotative';0 0 0 0 'Rotative';0 0 0 0 'Rotative';
    0 0 0 0 'Rotative';0 0 0 0 'Rotative';0 0 0 0 'Rotative';0 0 0 0 'Rotative'};
set(handles.table,'Data',odata);
set(handles.toggleedit,'value',0,'backg',[0.94 0.94 0.94]);
set(handles.table,'ColumnEditable',[true true true true true]);
function [] = toggle_edit(varargin)
h = varargin{1};
handles = varargin{3};
set(h,'backg',[0.1 0.8 0.1]);
data = get(handles.table,'Data');
for i=1:7,
    linkType = data(i,5);
    if strcmp(linkType,'Rotative'),
        switch i
            case 1
                set(handles.editsl1,'string','180');
                set(handles.slider1,'min',0,'max',360,'value',180);
            case 2
                set(handles.editsl2,'string','180');
                set(handles.slider2,'min',0,'max',360,'value',180); 
            case 3
                set(handles.editsl3,'string','180');
                set(handles.slider3,'min',0,'max',360,'value',180);
            case 4
                set(handles.editsl4,'string','180');
                set(handles.slider4,'min',0,'max',360,'value',180);    
            case 5
                set(handles.editsl5,'string','180');
                set(handles.slider5,'min',0,'max',360,'value',180);    
            case 6
                set(handles.editsl6,'string','180');
                set(handles.slider6,'min',0,'max',360,'value',180); 
            case 7
                set(handles.editsl7,'string','180');
                set(handles.slider7,'min',0,'max',360,'value',180);     
        end
    else
        switch i
            case 1
                set(handles.editsl1,'string','1');
                set(handles.slider1,'min',0,'max',2,'value',1);
            case 2
                set(handles.editsl2,'string','1');
                set(handles.slider2,'min',0,'max',2,'value',1); 
            case 3
                set(handles.editsl3,'string','1');
                set(handles.slider3,'min',0,'max',2,'value',1);
            case 4
                set(handles.editsl4,'string','1');
                set(handles.slider4,'min',0,'max',2,'value',1);    
            case 5
                set(handles.editsl5,'string','1');
                set(handles.slider5,'min',0,'max',2,'value',1);    
            case 6
                set(handles.editsl6,'string','1');
                set(handles.slider6,'min',0,'max',2,'value',1); 
            case 7
                set(handles.editsl7,'string','1');
                set(handles.slider7,'min',0,'max',2,'value',1);     
        end
    end
end
if get(h,'value') == 0
    set(h,'backg',[0.94 0.94 0.94]);
    set(handles.table,'ColumnEditable',[true true true true true]);
elseif get(h,'value') == 1
    set(handles.table,'ColumnEditable',[false false false false false]);
end
function [] = slicall(varargin)
    [h,handles] = varargin{[1,3]};
    name = get(h,'Tag');
    if (strcmp(name(1),'Y')~=1)
    switch name(1)
        case 's'
            number = name(7); 
            related = findobj('Tag',strcat('edit',number));
        case 'e'
            number = name(5);
            related = findobj('Tag',strcat('slider',number));
    end
    data = get(handles.table,'Data');
    boolClass = strcmp(data(str2double(number),5),'Rotative');
    dataMat = cell2mat(data(str2double(number),1:4));
    if (name(1) == 's') || (name(1) == 'e')
    switch name
        case strcat('edit',number)
             L = get(related,{'min','max','value'});  % Get the slider's info.
             E = str2double(get(h,'string'));  % Numerical edit string.
                if E >= L{1} && E <= L{2}
                    set(related,'value',E)  % E falls within range of slider.
                    switch boolClass
                        case 1
                            dataMat(1) = E;
                        case 0
                            dataMat(2) = E;
                    end
                else
                    set(h,'string',L{3}) % User tried to set slider out of range. 
                end
        case strcat('slider',number)
            set(related,'string',get(h,'value'))
            switch boolClass
                case 1
                    dataMat(1) = get(h,'value');
                case 0
                    dataMat(2) = get(h,'value');
            end
        otherwise
            % Do nothing, or do whatever
    end
    end
   data(str2double(number),1:4) = num2cell(dataMat);
   set(handles.table,'Data',data); 
    else
        tipo = name(6);
            switch tipo
                case 'E'
                    related = findobj('Tag','YoshiSlider');
                    L = get(related,{'min','max','value'});
                    E = str2double(get(h,'string'));
                    if E >= L{1} && E <= L{2}
                        set(related,'value',E)
                    else
                        set(h,'string',L{3}) % User tried to set slider out of range. 
                    end
                case 'S'
                    related = findobj('Tag','YoshiEdit');
                    set(related,'string',get(h,'value'))
            end
    end
function [] = pb_call(varargin)
h = varargin{1};
handles = varargin{3};
if get(handles.toggleedit,'value') == 1
col = get(h,'backg');
set(h,'str','RUNNING...','backg',[0.95 0.2 0.2])
%Plot the robot
axes(handles.axis);
data = get(handles.table,'Data');
dataMat = cell2mat(data(:,1:4));

DOF = 0; % Number of links
conf = false;
dataMat(:,4) = dataMat(:,4)*pi/180;
dataMat(:,1) = dataMat(:,1)*pi/180;

for i=1:7
    if (dataMat(i,:) == 0)
        % Do nothing
    else
        DOF = DOF+1;
        if strcmp(data(i,5),'Rotative')
            L(DOF) = Link('d',dataMat(i,2),'a',dataMat(i,3),'alpha',dataMat(i,4));
            handles.q(DOF) = dataMat(i,1);
        else
            L(DOF) = Link('theta',dataMat(i,1),'a',dataMat(i,3),'alpha',dataMat(i,4));
            handles.q(DOF) = dataMat(i,2);
            conf = true;
        end
    end
end
if DOF > 0
    handles.bot = SerialLink(L,'name',' ');
    if conf == false
        handles.bot.plot(handles.q);
    elseif conf == true
        handles.bot.plot(handles.q,'workspace',[-5 5 -5 5 -1 5]);
    else
        % Do nothing
    end
    T = handles.bot.fkine(handles.q);e = tr2eul(T);
    T = num2cell(T);e = e'; e=num2cell(e);
    set(handles.tablemth,'Data',T);
    set(handles.tablepos,'Data',T(1:3,4));
    set(handles.tableeul,'Data',e);
    J = handles.bot.jacob0(handles.q); % Geometric Jacobian
    Jv = J(1:3,:); Jw = J(4:6,:);
    set(handles.jacobV,'Data',Jv);
    set(handles.jacobW,'Data',Jw);
    axes(handles.Jvaxis)
    cla 
    ma = max(Jv); ma = max(ma);
    mi = min(Jv); mi = min(mi);
    axis([mi+0.1*mi ma+0.1*ma mi+0.1*mi ma+0.1*ma mi ma])
    for i=1:size(Jv,2)
        if (isequal(Jv(:,i),zeros(3,1)) == 0)
            grid on
            hold on
            plot3([0 J(1,i)],[0 J(2,i)],[0 J(3,i)],'LineWidth',3); 
            txt{i} = strcat('Jv',num2str(i));
        end
    end
    hold off
    l = legend(txt);
    xlabel('X');ylabel('Y');zlabel('Z');
    set(l,'Units','normalized','position',[0.66 0.32 0.03 0.1]);
    axes(handles.Jwaxis)
    cla 
    clear txt;
    ma = max(Jw); ma = max(ma);
    mi = min(Jw); mi = min(mi);
    axis([mi+0.1*mi ma+0.1*ma mi+0.1*mi ma+0.1*ma mi ma])
    for i=1:size(Jw,2)
        if (isequal(Jw(:,i),zeros(3,1)) == 0)
            grid on
            hold on
            plot3([0 Jw(1,i)],[0 Jw(2,i)],[0 Jw(3,i)],'LineWidth',3); 
            txt{i} = strcat('Jw',num2str(i));
        else
            plot3([0 0],[0,0],[0,0],'o','MarkerSize',7,'MarkerFaceColor','k')
            txt{i} = strcat('Jw',num2str(i),'=0');
        end
    end
    hold off
    l = legend(txt);
    xlabel('X');ylabel('Y');zlabel('Z');
    set(l,'Units','normalized','position',[0.92 0.32 0.03 0.1]);
    Yoshikawa = handles.bot.maniplty(handles.q,'yoshikawa');
    Yoshikawa = real(Yoshikawa);
    set(handles.yoshikawabox,'string',num2str(Yoshikawa));
    pause(0.5)
    set(h,'str','RUN','backg',col)
    guidata(gcbo,handles)
end
else
    warndlg('Please fill in the D-H parameters and ensure them clicking over the OK button.',...
        'WARNING: Impossible to initiate');
end
function [] = pb_generate(varargin)
h = varargin{1};
handles = guidata(gcbo)
dof = length(handles.q);
N = 5;
mapa = sobolset(dof);
mapa = 2*pi.*mapa(1:N,:);
axes(handles.yoshikawa)
nube = zeros(N,4);
for i=1:size(mapa,1),
     T = handles.bot.fkine(mapa(i,:));
     nube(i,1:3) = [T(1,4) T(2,4) T(3,4)];
     nube(i,4) = handles.bot.maniplty(mapa(i,:),'yoshikawa');
     if nube(i,4)<1e-4
         nube(i,4) = 0;
     end
     nube(i,4) = real(nube(i,4));
end
handles.mapa = nube;
handles.Sizes = [min(nube(:,1)),max(nube(:,1)),min(nube(:,2)),max(nube(:,2)),min(nube(:,3)),max(nube(:,3))];
set(h,'back','g','string','Cloud created');
guidata(gcbo,handles)
function [] = pb_slices(varargin)
h = varargin{1};
handles = guidata(gcbo);
Yosaxis = get(handles.popup,'value');
nube = handles.mapa;
thickness = str2double(get(handles.grosor,'string'));
zS = str2double(get(handles.edityoshi,'string'));
N = size(handles.mapa,1);
if isnan(thickness),
    thickness = 1;
elseif isnan(zS),
    zS = 0;
end
% Separation by planes
contador = 0;
if Yosaxis == 1,
    for i=1:N,
        if (nube(i,1)>(zS-thickness)) && (nube(i,1)<(zS+thickness)),
            contador = contador+1;
            reb(contador,:) = nube(i,:);
        end
    end
    set(handles.slideryoshi,'min',handles.Sizes(1),'max',handles.Sizes(2));
elseif Yosaxis == 2,
    for i=1:N,
        if (nube(i,2)>(zS-thickness)) && (nube(i,2)<(zS+thickness)),
            contador = contador+1;
            reb(contador,:) = nube(i,:);
        end
    end
    set(handles.slideryoshi,'min',handles.Sizes(3),'max',handles.Sizes(4));
else
    for i=1:N,
        if (nube(i,3)>(zS-thickness)) && (nube(i,3)<(zS+thickness)),
            contador = contador+1;
            reb(contador,:) = nube(i,:);
        end
    end
    set(handles.slideryoshi,'min',handles.Sizes(5),'max',handles.Sizes(6));
end
scatter3(reb(:,1),reb(:,2),reb(:,3),[],reb(:,4),'filled')
colormap();
colorbar;
if Yosaxis == 1,
    view(90,0);
elseif Yosaxis == 2,
    view(0,0);
elseif Yosaxis == 3,
    view(0,90);
else
    view(3);
end
xlabel('X');ylabel('Y');zlabel('Z');
guidata(gcbo,handles)
